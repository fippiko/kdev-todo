package ch.kdev.todo.server;

import java.util.List;

import junit.framework.TestCase;

import org.junit.Test;

import ch.kdev.todo.domain.Project;
import ch.kdev.todo.server.service.ProjectService;

public class ProjectServiceTest extends TestCase {

   private final static String PROJECT_ADD_NAME           = "Test Project Name (generated by JUnit)";
   private final static String PROJECT_ADD_DESCRIPTION    = "Test Project Description (generated by JUnit) This project should not exist.";

   private final static String PROJECT_UPDATE_NAME        = "Updated Test Project Name (updated by JUnit)";
   private final static String PROJECT_UPDATE_DESCRIPTION = "Updated Test Project Description (updated by JUnit) This project should not exist.";

   ProjectService              projectService;

   @Override
   public void setUp() {
      this.projectService = new ProjectService();
   }

   @Test
   public void testProjectCRUD() {
      // C - Create
      Project projectToAdd = this.createNewProject();
      this.projectService.persist(projectToAdd);

      // R - Read
      Project addedProject = this.projectService.findProject(projectToAdd.getId());

      assertEquals(PROJECT_ADD_NAME, addedProject.getName());
      assertEquals(PROJECT_ADD_DESCRIPTION, addedProject.getDescription());

      // U - Update
      addedProject.setName(PROJECT_UPDATE_NAME);
      addedProject.setDescription(PROJECT_UPDATE_DESCRIPTION);

      this.projectService.persist(addedProject);
      Project updatedProject = this.projectService.findProject(addedProject.getId());

      assertEquals(PROJECT_UPDATE_NAME, updatedProject.getName());
      assertEquals(PROJECT_UPDATE_DESCRIPTION, updatedProject.getDescription());

      // D - Delete
      this.projectService.delete(updatedProject);
   }

   @Test
   public void testFindAll() {
      // add some projects...
      Project projectToAdd1 = this.createNewProject();
      Project projectToAdd2 = this.createNewProject();
      Project projectToAdd3 = this.createNewProject();

      this.projectService.persist(projectToAdd1);
      this.projectService.persist(projectToAdd2);
      this.projectService.persist(projectToAdd3);

      List<Project> allProjects = this.projectService.findAll();

      int foundProjectCount = 0;
      for (Project project : allProjects) {
         long projectId = project.getId();

         if (projectId == projectToAdd1.getId()) {
            foundProjectCount++;
         }
         if (projectId == projectToAdd2.getId()) {
            foundProjectCount++;
         }
         if (projectId == projectToAdd3.getId()) {
            foundProjectCount++;
         }
      }

      assertEquals(foundProjectCount, 3);
      assertTrue(this.projectService.countProjects() >= 3);

      // delete all created projects
      this.projectService.delete(projectToAdd1);
      this.projectService.delete(projectToAdd2);
      this.projectService.delete(projectToAdd3);
   }

   public Project createNewProject() {
      Project project = new Project();

      project.setName(PROJECT_ADD_NAME);
      project.setDescription(PROJECT_ADD_DESCRIPTION);

      return project;
   }

}
